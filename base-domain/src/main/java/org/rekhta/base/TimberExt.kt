@file:Suppress("unused")package org.rekhta.baseimport timber.log.*/** Invokes an action if any trees are planted */inline fun ifPlanted(action: () -> Unit) {    if (Timber.treeCount > 0) {        action()    }}/** Delegates the provided message to [Timber.error] if any trees are planted. */inline fun errorLog(throwable: Throwable? = null, message: () -> String = { "" }) =    ifPlanted {        Timber.e(throwable, message())    }/** Delegates the provided message to [Timber.warn] if any trees are planted. */inline fun w(throwable: Throwable? = null, message: () -> String) =    ifPlanted {        Timber.w(throwable, message())    }/** Delegates the provided message to [Timber.info] if any trees are planted. */inline fun i(throwable: Throwable? = null, message: () -> String) =    ifPlanted {        Timber.i(throwable, message())    }/** Delegates the provided message to [Timber.debug] if any trees are planted. */inline fun debug(throwable: Throwable? = null, message: () -> String) =    ifPlanted {        Timber.d(throwable, message())    }/** Delegates the provided message to [Timber.verbose] if any trees are planted. */inline fun v(throwable: Throwable? = null, message: () -> String) =    ifPlanted {        Timber.v(throwable, message())    }/** Delegates the provided message to [Timber.assert] if any trees are planted. */inline fun wtf(throwable: Throwable? = null, message: () -> String) =    ifPlanted {        Timber.wtf(throwable, message())    }/** Delegates the provided message to [Timber.log] if any trees are planted. */inline fun log(priority: Int, t: Throwable, message: () -> String) =    ifPlanted {        Timber.log(priority, t, message())    }fun throwIfDebug(throwable: Throwable?) {    ifPlanted {        errorLog(throwable)        throwable?.let { throw throwable }    }}